"""
–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:

–î–∞—Ç–∞ - 15.03.2025

–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —É—á–µ—Ç–∞ –∫–Ω–∏–≥ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.
"""

import pickle
import uuid
import os
from typing import List, Optional

class Book:
    def __init__(self, title, author, isbn=None):
        self.title = title
        self.author = author
        self.isbn = isbn if isbn else str(uuid.uuid4())
        self.available = True

    def __repr__(self):
        return f"Book({self.title}, {self.author}, {self.isbn}, {self.available})"

    def __str__(self):
        return f"{self.title} ({self.author}) - {'–î–æ—Å—Ç—É–ø–Ω–∞' if self.available else '–ó–∞–Ω—è—Ç–∞'}"

    def is_available(self):
        return self.available

    def borrow(self):
        if self.available:
            self.available = False
            print(f"–ö–Ω–∏–≥–∞ '{self.title}' –≤—ã–¥–∞–Ω–∞ —á–∏—Ç–∞—Ç–µ–ª—é.")
        else:
            print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{self.title}' —É–∂–µ –∑–∞–Ω—è—Ç–∞.")

    def return_book(self):
        if not self.available:
            self.available = True
            print(f"–ö–Ω–∏–≥–∞ '{self.title}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.")
        else:
            print(f"–ö–Ω–∏–≥–∞ '{self.title}' —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")

class User:
    def __init__(self, name: str, user_id: str = None):
        self.name = name
        self.user_id = user_id if user_id else str(uuid.uuid4())
        self.borrowed_books: List[Book] = []

    def __repr__(self):
        return f"User({self.name}, ID: {self.user_id}, Books: {[book.title for book in self.borrowed_books]})"

    def __str__(self):
        return f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.name}, ID: {self.user_id}"

    def borrow_book(self, book: 'Book', library: 'Library'):
        if book not in library.books:
            print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{book.title}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
            return
        if book in self.borrowed_books:
            print(f"–û—à–∏–±–∫–∞: –í—ã —É–∂–µ –≤–∑—è–ª–∏ –∫–Ω–∏–≥—É '{book.title}'.")
            return
        if book.is_available():
            book.borrow()
            self.borrowed_books.append(book)
            print(f"–ö–Ω–∏–≥–∞ '{book.title}' —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {self.name}.")
        else:
            print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{book.title}' —É–∂–µ –∑–∞–Ω—è—Ç–∞.")

    def return_book(self, book: 'Book', library: 'Library'):
        if book not in library.books:
            print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{book.title}' –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
            return
        if book in self.borrowed_books:
            book.return_book()
            self.borrowed_books.remove(book)
            print(f"–ö–Ω–∏–≥–∞ '{book.title}' —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.")
        else:
            print(f"–û—à–∏–±–∫–∞: –£ –≤–∞—Å –Ω–µ—Ç –∫–Ω–∏–≥–∏ '{book.title}'.")

    def get_borrowed_books(self) -> List[str]:
        return [book.title for book in self.borrowed_books]

class Admin(User):
    def __init__(self, name: str, user_id: str = None):
        super().__init__(name, user_id)
        self.is_admin = True

    def add_book(self, library: 'Library', book: 'Book'):
        if any(b.isbn == book.isbn for b in library.books):
            print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ —Å ISBN {book.isbn} —É–∂–µ –µ—Å—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
            return
        library.add_book(book)
        print(f"–ö–Ω–∏–≥–∞ '{book.title}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.")

    def remove_book(self, library: 'Library', book: 'Book'):
        if book in library.books:
            if book.is_available():
                library.remove_book(book)
                print(f"üóë –ö–Ω–∏–≥–∞ '{book.title}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")
            else:
                print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{book.title}' —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.")
        else:
            print("–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")

class Library:
    def __init__(self, filename="library.pkl"):
        self.filename = filename
        self.books: List[Book] = []
        self.users: List[User] = []
        self.load_data()

    def save_data(self):
        try:
            with open(self.filename, "wb") as file:
                pickle.dump({"books": self.books, "users": self.users}, file)
            print("–î–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        except IOError:
            print("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")

    def load_data(self):
        try:
            with open(self.filename, "rb") as file:
                data = pickle.load(file)

            if isinstance(data, dict):
                self.books = data.get("books", [])
                self.users = data.get("users", [])
            elif isinstance(data, Library):
                self.books = data.books
                self.users = data.users
            else:
                raise ValueError("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")

            print("–î–∞–Ω–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        except (FileNotFoundError, EOFError):
            print("–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω. –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

    def add_book(self, book: Book):
        if any(b.isbn == book.isbn for b in self.books):
            print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{book.title}' —É–∂–µ –µ—Å—Ç—å –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
        else:
            self.books.append(book)
            self.save_data()
            print(f"–ö–Ω–∏–≥–∞ '{book.title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É.")

    def remove_book(self, book: Book):
        if book in self.books:
            if book.is_available():
                self.books.remove(book)
                self.save_data()
                print(f"–ö–Ω–∏–≥–∞ '{book.title}' —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.")
            else:
                print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{book.title}' —Å–µ–π—á–∞—Å –∑–∞–Ω—è—Ç–∞ –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–∞.")
        else:
            print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{book.title}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")

    def register_user(self, name: str, role: str) -> Optional[User]:
        if name.lower() in ["q", "–æ—Ç–º–µ–Ω–∞"]:
            print("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return None

        existing_user = next((user for user in self.users if user.name.lower() == name.lower()), None)
        if existing_user:
            print(f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{name}' —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return existing_user

        user_id = str(uuid.uuid4())
        new_user = Admin(name, user_id) if role.lower() == "admin" else User(name, user_id)

        self.users.append(new_user)
        self.save_data()
        print(f"{role.capitalize()} {name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID: {user_id}")
        return new_user

    def authenticate(self, user_id: str) -> Optional[User]:
        if user_id.lower() in ["q", "–æ—Ç–º–µ–Ω–∞"]:
            print("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.")
            return None

        user = next((user for user in self.users if user.user_id == user_id), None)
        if user is None:
            print("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return user

    def lend_book(self, user: User, book: Book):
        if book not in self.books:
            print(f"–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ '{book.title}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
            return
        if book.is_available():
            user.borrow_book(book, self)
            self.save_data()
        else:
            print("–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞.")

    def accept_return(self, user: User, book: Book):
        if book in user.borrowed_books:
            user.return_book(book, self)
            self.save_data()
        else:
            print("–û—à–∏–±–∫–∞: –ö–Ω–∏–≥–∞ –Ω–µ –±—ã–ª–∞ –≤–∑—è—Ç–∞ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

    def list_available_books(self) -> str:
        available_books = [book for book in self.books if book.is_available()]
        if available_books:
            result = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–∏–≥–∏:\n" + "\n".join(f"- {book.title} ({book.author})" for book in available_books)
            print(result)
            return result
        else:
            print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.")
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥."

def clear_screen():
    print("\033[H\033[J", end="")

def main_menu():
    library = Library()
    commands = {
        "1": "–≤–æ–π—Ç–∏", "–≤–æ–π—Ç–∏": "1",
        "2": "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è": "2",
        "3": "–≤—ã–π—Ç–∏", "–≤—ã–π—Ç–∏": "3"
    }

    while True:
        clear_screen()
        print("\n=== –ë–ò–ë–õ–ò–û–¢–ï–ö–ê ===")
        print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        for num, cmd in commands.items():
            if num.isdigit():
                print(f"{num}. {cmd.capitalize()}")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–Ω–æ–º–µ—Ä –∏–ª–∏ —Å–ª–æ–≤–æ): ").strip().lower()
        print(f"DEBUG: –í–≤–µ–¥–µ–Ω–æ '{choice}'")

        if choice in commands:
            choice = commands[choice]
        print(f"DEBUG: –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{choice}'")

        if choice == "1":
            user_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à user ID: ").strip()
            user = library.authenticate(user_id)
            if user:
                user_menu(library, user)
            else:
                print("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

        elif choice == "2":
            name = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ").strip()
            role = input("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å (user/admin): ").strip().lower()
            if role in ["user", "admin"]:
                user = library.register_user(name, role)
                if user:
                    user_menu(library, user)
            else:
                print("–û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ä–æ–ª—å.")
                input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

        elif choice == "3":
            library.save_data()
            print("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break

        else:
            print("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
            input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

def user_menu(library, user):

    commands = {
        "1": "–≤–∑—è—Ç—å –∫–Ω–∏–≥—É", "–≤–∑—è—Ç—å –∫–Ω–∏–≥—É": "1",
        "2": "–≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É", "–≤–µ—Ä–Ω—É—Ç—å –∫–Ω–∏–≥—É": "2",
        "3": "—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥", "—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥": "3",
        "4": "–≤—ã–π—Ç–∏", "–≤—ã–π—Ç–∏": "4"
    }

    if isinstance(user, Admin):
        admin_commands = {
            "5": "–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", "–¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É": "5",
            "6": "—É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É", "—É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É": "6"
        }
        commands.update(admin_commands)

    while True:
        clear_screen()
        print(f"\n–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user.name} ({'Admin' if isinstance(user, Admin) else 'User'})")
        print("=== –ú–µ–Ω—é ===")
        for num, cmd in commands.items():
            if num.isdigit():
                print(f"{num}. {cmd.capitalize()}")

        choice = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (–Ω–æ–º–µ—Ä –∏–ª–∏ —Å–ª–æ–≤–æ): ").strip().lower()
        choice = commands.get(choice, choice)

        if choice == "1":
            book_title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ").strip()
            book = next((b for b in library.books if b.title.lower() == book_title.lower()), None)
            if book:
                library.lend_book(user, book)
            else:
                print("–û—à–∏–±–∫–∞: –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

        elif choice == "2":
            book_title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ").strip()
            book = next((b for b in user.borrowed_books if b.title.lower() == book_title.lower()), None)
            if book:
                library.accept_return(user, book)
            else:
                print("–û—à–∏–±–∫–∞: —É –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–π –∫–Ω–∏–≥–∏.")
            input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

        elif choice == "3":
            library.list_available_books()
            input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

        elif choice == "4":
            print("–í—ã—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            library.save_data()
            break

        elif choice == "5" and isinstance(user, Admin):
            book_title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏: ").strip()
            book_author = input("–í–≤–µ–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞ –∫–Ω–∏–≥–∏: ").strip()
            book_isbn = input("–í–≤–µ–¥–∏—Ç–µ ISBN –∫–Ω–∏–≥–∏ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏): ").strip()

            if not book_isbn:
                book_isbn = str(uuid.uuid4())

            new_book = Book(book_title, book_author, book_isbn)
            user.add_book(library, new_book)
            input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

        elif choice == "6" and isinstance(user, Admin):
            book_title = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
            book = next((b for b in library.books if b.title.lower() == book_title.lower()), None)
            if book:
                user.remove_book(library, book)
            else:
                print("–û—à–∏–±–∫–∞: –∫–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

        else:
            print("–û—à–∏–±–∫–∞: –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.")
            input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

if __name__ == "__main__":
    main_menu()